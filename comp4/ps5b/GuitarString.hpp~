#ifndef _GuitarString_
#define _GuitarString_ 

#include <iostream> 
#include <string>
#include <cstdlib>

class GS{
  RingBuffer *_j; int _size, _ticCount;
  
  public:
 
  explicit GS(int freq): {
    //use resize ?
    _size = ceiling((44100/freq)); 
    _j = new RingBuffer(_size);  
    _ticCount = 0;
     for ( int i = 0 ; i < _size; i++) 
       _j->enqueue(0) ; 
  }
  ~GS(): {
    //make sure to free bytes for the pointer. 
    delete[] j;
  }
  void Pluck();
  int Time();
  void Tic();
  Int16 Sample();  
};

void GS::Pluck() {
  if(j->isEmpty())
    throw
      std::runtime_error("Can't pluck, empty buffer.");
  
  int i, sc; Int16 ran;
  sc = _capacity; 
  
  for ( i = 0 ; i < sc; i++)
    _j->dequeue();

  for ( i = 0 ; i < sc; i++ ) {
    ran = (Int16)((rand() % .10) - .5);
      _j->enqueue(ran);
  }
}

void GS::Tic() {
  if(_j->isEmpty())
    throw
      std::runtime_error("Can't tic, empty buffer."); 
  double num1, num2, result;
  num1 = _j->dequeue();
  num2 = _j->peek();
  result = .996*.5*(num1 + num2);
  for( i = 0 ; i < _size - 1; i++)
    _j->enqueue(_j->dequeue());
  _j->enqueue(result);
  _ticCount++;
}

Int16 GS::Sample() {
  return _j->peek();
}

int GS::Time() {
  return _ticCount;
}
#endif
